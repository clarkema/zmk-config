/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define ENGRAM 3
#define COMBO_KEY_CAPS_WORD <52 57>

&caps_word { continue-list = <UNDERSCORE MINUS BSPC>; };

&sk {
    quick-release;
    lazy;
};

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LOWER>, <&to LOWER>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };

    combos {
        compatible = "zmk,combos";

        // Turn on CAPS_WORD when pressing both shift keys together

        combo_caps_word {
            timeout-ms = <75>;
            key-positions =
            COMBO_KEY_CAPS_WORD;
            layers = <0>;
            bindings = <&caps_word>;
        };

        combo_ctrl_a {
            timeout-ms = <75>;
            key-positions = <69 74>;
            layers = <0>;
            bindings = <&kp LC(A)>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp F1            &kp F2    &kp F3   &kp F4    &kp F5                                                                                                   &kp F6    &kp F7        &kp F8    &kp F9    &kp F10
&kp EQUAL         &kp N1    &kp N2   &kp N3    &kp N4     &kp N5                                                                                &kp N6  &kp N7    &kp N8        &kp N9    &kp N0    &kp MINUS
&kp TAB           &kp Q     &kp W    &kp E     &kp R      &kp T                                                                                 &kp Y   &kp U     &kp I         &kp O     &kp P     &kp BSLH
&mt LCTRL ESCAPE  &kp A     &kp S    &kp D     &kp F      &kp G                                                                                 &kp H   &kp J     &kp K         &kp L     &kp SEMI  &kp SQT
&kp GRAVE         &kp Z     &kp X    &kp C     &kp V      &kp B   &sk LSHFT        &kp LCTRL  &kp DEL     &kp LGUI      &kp RCTRL  &sk RSHFT    &kp N   &kp M     &kp COMMA     &kp DOT   &kp FSLH  &kp PG_UP
&magic MAGIC 0    &kp HOME  &kp END  &kp LEFT  &kp RIGHT          &lt 4 BACKSPACE  &lt 1 TAB  &kp LALT    &mt RALT TAB  &kp RET    &lt 3 SPACE          &kp DOWN  &kp UP_ARROW  &kp LBKT  &kp RBKT  &kp PG_DN
            >;
        };

        lower_layer {
            bindings = <
&kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV  &kp C_NEXT  &kp C_PP                                                                                               &kp C_MUTE     &kp C_VOL_DN  &kp C_VOL_UP   &none            &kp PAUSE_BREAK
&trans        &none         &none       &none       &none         &kp HOME                                                                      &kp LPAR   &kp LS(EQUAL)  &kp EQUAL     &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp PSCRN
&trans        &none         &none       &kp UP      &none         &kp END                                                                       &kp RPAR   &kp NUMBER_7   &kp N8        &kp N9         &kp KP_MINUS     &kp SLCK
&trans        &none         &kp LEFT    &kp DOWN    &kp RIGHT     &kp PG_UP                                                                     &kp PRCNT  &kp NUMBER_4   &kp N5        &kp NUMBER_6   &kp KP_PLUS      &none
&trans        &kp K_CMENU   &none       &kp F11     &kp LEFT_GUI  &kp PG_DN  &trans  &trans  &to DEFAULT    &kp LS(TAB)  &trans  &kp BACKSPACE  &kp COLON  &kp NUMBER_1   &kp NUMBER_2  &kp N3         &kp KP_ENTER     &trans
&trans        &kp CAPS      &kp INS     &kp F11     &kp F12                  &trans  &trans  &trans         &trans       &trans  &trans                    &kp N0         &kp NUMBER_0  &kp DOT        &kp KP_ENTER     &trans
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                       &none  &none  &none  &none  &none
&none        &tog 1           &tog 2           &tog 3           &tog 4           &tog 5                                                              &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                     &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                     &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none           &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &tog 5           &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB    &none  &none  &none         &none  &none  &none  &none  &none
            >;
        };

        engram_layer {
            bindings = <
&none            &none      &none                     &none           &none                                                                                                              &none          &none        &none              &none         &none
&none            &kp GRAVE  &kp LPAR                  &kp RPAR        &kp SEMI    &kp COMMA                                                                            &none             &none          &none        &none              &none         &none
&kp EXCL         &kp LBKT   &kp LBRC                  &kp RBRC        &kp RBKT    &kp QUESTION                                                                         &kp GRAVE         &kp LSHIFT     &kp LCTRL    &kp LEFT_ALT       &kp LEFT_GUI  &none
&kp NON_US_HASH  &kp CARET  &kp EQUAL                 &kp UNDERSCORE  &kp DOLLAR  &kp ASTERISK                                                                         &kp LS(NUMBER_2)  &kp BACKSPACE  &kp TAB      &kp SPACE          &kp KP_ENTER  &none
&kp LS(BSLH)     &kp LT     &kp LS(NON_US_BACKSLASH)  &kp MINUS       &kp GT      &kp FSLH      &kp NON_US_BACKSLASH  &kp DOT    &kp ASTERISK     &none  &none  &none  &kp SQT           &kp DEL        &kp LS(TAB)  &kp LC(BACKSPACE)  &none         &none
&kp LS(APOS)     &kp AMPS   &kp GRAVE                 &kp EXCL        &kp PLUS                  &kp PERCENT           &kp COLON  &kp SEMICOLON    &none  &none  &none                    &kp LPAR       &kp LBKT     &kp RBKT           &kp RPAR      &none
            >;
        };

        bonus {
            bindings = <
&trans  &trans  &trans     &trans         &trans                                                                             &trans                 &trans                &trans  &trans  &trans
&trans  &trans  &trans     &trans         &trans         &trans                                                      &trans  &trans                 &trans                &trans  &trans  &trans
&trans  &trans  &trans     &trans         &trans         &trans                                                      &trans  &kp RBKT               &kp LBKT              &trans  &trans  &trans
&trans  &trans  &trans     &kp BACKSPACE  &kp ENTER      &kp LGUI                                                    &trans  &kp RIGHT_PARENTHESIS  &kp LEFT_PARENTHESIS  &trans  &trans  &trans
&trans  &trans  &kp LA(X)  &kp LS(LC(C))  &kp LS(LC(V))  &trans    &trans  &trans  &trans    &trans  &trans  &trans  &trans  &kp RBRC               &kp LBRC              &trans  &trans  &trans
&trans  &trans  &trans     &trans         &trans                   &trans  &trans  &trans    &trans  &trans  &trans          &trans                 &trans                &trans  &trans  &trans
            >;
        };

        media_layer {
            bindings = <
&trans  &trans  &trans      &trans          &trans                                                                                   &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans      &trans          &trans      &trans                                                               &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp C_PREV  &kp C_PP        &kp C_NEXT  &kp C_VOL_UP                                                         &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans      &kp UP_ARROW    &kp F       &kp C_VOLUME_DOWN                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp LEFT    &kp DOWN_ARROW  &kp RIGHT   &kp C_MUTE         &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans      &trans          &kp SPACE                      &trans  &trans  &trans    &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
